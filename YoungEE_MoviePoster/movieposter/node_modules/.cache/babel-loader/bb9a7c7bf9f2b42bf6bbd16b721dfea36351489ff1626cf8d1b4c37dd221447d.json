{"ast":null,"code":"var _jsxFileName = \"/Users/eo-seonyoung/Documents/GitHub/Web-2/Week3/movieposter/movieposter3/src/components/NowPlayingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport MovieCard from './MovieCard'; // MovieCard 컴포넌트를 import합니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NowPlayingPage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const API_KEY = '41b11920d4e93b17f6df78d77da5135f';\n  const API_URL = `https://api.themoviedb.org/3/movie/now_playing?language=ko&page=1&region=KR&api_key=${API_KEY}`;\n\n  // useRef 훅을 사용하여 DOM 요소 참조하기\n  const isMounted = useRef(false);\n  useEffect(() => {\n    // 컴포넌트가 마운트된 후에만 isMounted 값을 true로 설정\n    isMounted.current = true;\n    const fetchMovies = async () => {\n      try {\n        const response = await axios.get(API_URL);\n        // 컴포넌트가 마운트된 후에만 상태 업데이트를 수행합니다.\n        if (isMounted.current) {\n          setMovies(response.data.results);\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n\n    // 컴포넌트가 언마운트될 때 isMounted 값을 false로 설정하여 참조를 정리합니다.\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"now-playing-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD604\\uC7AC \\uC0C1\\uC601\\uC911\\uC778 \\uC601\\uD654\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        title: movie.title,\n        poster_path: movie.poster_path,\n        vote_average: movie.vote_average,\n        overview: movie.overview\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(NowPlayingPage, \"+5MUI0xz2SH0OoJM3MwgRVtkGtY=\");\n_c = NowPlayingPage;\nexport default NowPlayingPage;\nvar _c;\n$RefreshReg$(_c, \"NowPlayingPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","MovieCard","jsxDEV","_jsxDEV","NowPlayingPage","_s","movies","setMovies","API_KEY","API_URL","isMounted","current","fetchMovies","response","get","data","results","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","title","poster_path","vote_average","overview","id","_c","$RefreshReg$"],"sources":["/Users/eo-seonyoung/Documents/GitHub/Web-2/Week3/movieposter/movieposter3/src/components/NowPlayingPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport MovieCard from './MovieCard'; // MovieCard 컴포넌트를 import합니다.\n\nconst NowPlayingPage = () => {\n  const [movies, setMovies] = useState([]);\n  const API_KEY = '41b11920d4e93b17f6df78d77da5135f';\n  const API_URL = `https://api.themoviedb.org/3/movie/now_playing?language=ko&page=1&region=KR&api_key=${API_KEY}`;\n  \n  // useRef 훅을 사용하여 DOM 요소 참조하기\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    // 컴포넌트가 마운트된 후에만 isMounted 값을 true로 설정\n    isMounted.current = true;\n\n    const fetchMovies = async () => {\n      try {\n        const response = await axios.get(API_URL);\n        // 컴포넌트가 마운트된 후에만 상태 업데이트를 수행합니다.\n        if (isMounted.current) {\n          setMovies(response.data.results);\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n\n    fetchMovies();\n\n    // 컴포넌트가 언마운트될 때 isMounted 값을 false로 설정하여 참조를 정리합니다.\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return (\n    <div className=\"now-playing-page\">\n      <h1>현재 상영중인 영화</h1>\n      <div className=\"movie-list\">\n        {movies.map(movie => (\n          <MovieCard\n            key={movie.id}\n            title={movie.title}\n            poster_path={movie.poster_path}\n            vote_average={movie.vote_average}\n            overview={movie.overview}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default NowPlayingPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMW,OAAO,GAAG,kCAAkC;EAClD,MAAMC,OAAO,GAAI,uFAAsFD,OAAQ,EAAC;;EAEhH;EACA,MAAME,SAAS,GAAGX,MAAM,CAAC,KAAK,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd;IACAY,SAAS,CAACC,OAAO,GAAG,IAAI;IAExB,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACL,OAAO,CAAC;QACzC;QACA,IAAIC,SAAS,CAACC,OAAO,EAAE;UACrBJ,SAAS,CAACM,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;QAClC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDL,WAAW,CAAC,CAAC;;IAEb;IACA,OAAO,MAAM;MACXF,SAAS,CAACC,OAAO,GAAG,KAAK;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAKgB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BjB,OAAA;MAAAiB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBrB,OAAA;MAAKgB,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBd,MAAM,CAACmB,GAAG,CAACC,KAAK,iBACfvB,OAAA,CAACF,SAAS;QAER0B,KAAK,EAAED,KAAK,CAACC,KAAM;QACnBC,WAAW,EAAEF,KAAK,CAACE,WAAY;QAC/BC,YAAY,EAAEH,KAAK,CAACG,YAAa;QACjCC,QAAQ,EAAEJ,KAAK,CAACI;MAAS,GAJpBJ,KAAK,CAACK,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnB,EAAA,CAhDID,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AAkDpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}