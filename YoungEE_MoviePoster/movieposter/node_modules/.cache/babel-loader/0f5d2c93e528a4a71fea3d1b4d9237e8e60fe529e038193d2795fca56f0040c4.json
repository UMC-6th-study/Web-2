{"ast":null,"code":"var _jsxFileName = \"/Users/eo-seonyoung/Documents/GitHub/Web-2/Week3/movieposter/movieposter3/src/components/PopularPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // axios 모듈 import\nimport MovieCard from './MovieCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopularPage = () => {\n  _s();\n  const [movies, popularMovies] = useState([]); // 영화 목록을 저장할 상태 변수\n\n  useEffect(() => {\n    // 페이지가 로드될 때 영화 데이터를 가져오는 useEffect 훅\n    const fetchMovies = async () => {\n      try {\n        const response = await axios.get('https://api.themoviedb.org/3/movie/popular', {\n          // axios를 사용하여 API 호출\n          params: {\n            // API 요청에 필요한 파라미터 설정\n            language: 'ko',\n            // 언어 설정 (한국어)\n            page: 1,\n            // 페이지 번호 설정\n            region: 'KR',\n            // 지역 설정 (한국)\n            api_key: '41b11920d4e93b17f6df78d77da5135f' // API 키\n          }\n        });\n        popularMovies(response.data.results); // API 응답에서 영화 목록을 가져와 상태 변수에 저장\n      } catch (error) {\n        console.error('Error fetching movies:', error); // 에러 처리\n      }\n    };\n    fetchMovies(); // fetchMovies 함수 호출\n  }, []); // 빈 배열을 전달하여 페이지가 처음 로드될 때만 useEffect 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Now Playing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-container\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PopularPage, \"Eao67gUOjXvP1h10/XOwO6P+NyI=\");\n_c = PopularPage;\nexport default PopularPage; // NowPlayingPage 컴포넌트 내보내기\nvar _c;\n$RefreshReg$(_c, \"PopularPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieCard","jsxDEV","_jsxDEV","PopularPage","_s","movies","popularMovies","fetchMovies","response","get","params","language","page","region","api_key","data","results","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","movie","id","_c","$RefreshReg$"],"sources":["/Users/eo-seonyoung/Documents/GitHub/Web-2/Week3/movieposter/movieposter3/src/components/PopularPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // axios 모듈 import\nimport MovieCard from './MovieCard';\n\nconst PopularPage = () => {\n  const [movies, popularMovies] = useState([]); // 영화 목록을 저장할 상태 변수\n\n  useEffect(() => {\n    // 페이지가 로드될 때 영화 데이터를 가져오는 useEffect 훅\n    const fetchMovies = async () => {\n      try {\n        const response = await axios.get('https://api.themoviedb.org/3/movie/popular', {\n          // axios를 사용하여 API 호출\n          params: {\n            // API 요청에 필요한 파라미터 설정\n            language: 'ko', // 언어 설정 (한국어)\n            page: 1, // 페이지 번호 설정\n            region: 'KR', // 지역 설정 (한국)\n            api_key: '41b11920d4e93b17f6df78d77da5135f' // API 키\n          }\n        });\n        popularMovies(response.data.results); // API 응답에서 영화 목록을 가져와 상태 변수에 저장\n      } catch (error) {\n        console.error('Error fetching movies:', error); // 에러 처리\n      }\n    };\n\n    fetchMovies(); // fetchMovies 함수 호출\n  }, []); // 빈 배열을 전달하여 페이지가 처음 로드될 때만 useEffect 실행\n\n  return (\n    <div>\n      <h1>Now Playing</h1> {/* 페이지 제목 */}\n      <div className=\"movie-container\">\n        {/* 영화 목록을 반복하여 각각의 영화를 MovieCard 컴포넌트로 렌더링 */}\n        {movies.map(movie => (\n          <MovieCard key={movie.id} movie={movie} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PopularPage; // NowPlayingPage 컴포넌트 내보내기\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,4CAA4C,EAAE;UAC7E;UACAC,MAAM,EAAE;YACN;YACAC,QAAQ,EAAE,IAAI;YAAE;YAChBC,IAAI,EAAE,CAAC;YAAE;YACTC,MAAM,EAAE,IAAI;YAAE;YACdC,OAAO,EAAE,kCAAkC,CAAC;UAC9C;QACF,CAAC,CAAC;QACFR,aAAa,CAACE,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC,CAAC;MAClD;IACF,CAAC;IAEDV,WAAW,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC,eACrBrB,OAAA;MAAKsB,SAAS,EAAC,iBAAiB;MAAAL,QAAA,EAE7Bd,MAAM,CAACoB,GAAG,CAACC,KAAK,iBACfxB,OAAA,CAACF,SAAS;QAAgB0B,KAAK,EAAEA;MAAM,GAAvBA,KAAK,CAACC,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnB,EAAA,CArCID,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAuCjB,eAAeA,WAAW,CAAC,CAAC;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}